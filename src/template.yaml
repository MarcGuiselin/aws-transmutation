AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  The AWS Transmutation Pipeline Template

Metadata:
  #AWS::ServerlessRepo::Application:
  #  Name: aws-transmutation-pipeline
  #  Description: >
  #    The AWS Transmutation Pipeline Template
  #  Author: Marc Guiselin
  #  SpdxLicenseId: MIT-0
  #  Labels: [github, cd, ci, codepipeline, continuous-deploy]
  #  HomePageUrl: https://github.com/MarcGuiselin/aws-transmutation
  #  SemanticVersion: 0.1.0
  #  SourceCodeUrl: https://github.com/MarcGuiselin/aws-transmutation
  #  LicenseUrl: LICENSE
  #  ReadmeUrl: README.md
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Pipeline Configuration
        Parameters: 
          - ProjectName
          - AutoPermissions
      - Label:
          default: Source (GitHub)
        Parameters:
          - GithubToken
          - GithubSecret
          - GithubOwner
          - GithubRepo
    ParameterLabels:
      # Pipeline Configuration
      ProjectName:
        default: Project Name
      AutoPermissions:
        default: Automatic Permissions Update
      # Source (GitHub)
      GithubToken:
        default: OAuth Token
      GithubSecret:
        default: Webhook Secret
      GithubOwner:
        default: Repo Owner (https://github.com/__this__/repo)
      GithubRepo: 
        default: Repo Name (https://github.com/owner/__this__)

Parameters:
  # Pipeline Configuration
  ProjectName:
    Type: String
    Default: my-project
    Description: >
      The UNIQUE name for your project. Alphanumeric separated by hyphens.
      
      All resources belonging to the pipeline will follow similar naming conventions including
      "my-project--cd--master-branch-pipeline", "my-project--cd--staging-branch-build",
      "my-project--cd--artifacts-bucket", etc

      Deployed stacks will also suse this name: "my-project--master-branch-stack",
      "my-project--staging-branch-stack", etc
  AutoPermissions:
    Description: After CloudFormation stack deployment rewrite codebuild rules to give scripts access to deployed resources. Disable this if you want to write your own permissions.
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
    Default: Enabled
  # Source (GitHub)
  GithubToken:
    Type: String
    Default: ''
    AllowedPattern: '^[A-Za-z0-9]*$'
    Description: >
      OAuth token used by AWS CodePipeline to connect to GitHub.
      General instructions for creating a GitHub OAuth token can be found at:
      https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line
      When you get to the scopes/permissions page, you should select the "repo"
      and "admin:repo_hook" scopes, which will automatically select all
      permissions under those two scopes.
    NoEcho: true
  GithubSecret:
    Type: String
    Default: ''
    AllowedPattern: '^[A-Za-z0-9]*$'
    Description: >
      GitHub webhook secret
    NoEcho: true
  GithubOwner:
    Type: String
    Default: ''
    AllowedPattern: '^\S*$'
    Description: >
      GitHub username owning the repo
  GithubRepo:
    Type: String
    Default: ''
    AllowedPattern: '^\S*$'
    Description: >
      GitHub repo name

Rules:
  ValidateParameters:
    Assertions:
      - Assert: !Not [!Equals [!Ref GithubToken, '']]
        AssertDescription: GithubToken must be specified
      - Assert: !Not [!Equals [!Ref GithubSecret, '']]
        AssertDescription: GithubSecret must be specified
      - Assert: !Not [!Equals [!Ref GithubOwner, '']]
        AssertDescription: GithubOwner must be specified
      - Assert: !Not [!Equals [!Ref GithubRepo, '']]
        AssertDescription: GithubRepo must be specified

Conditions:
  HasPermissionsUpdate:
    !Equals [!Ref AutoPermissions, 'Enabled']

Globals:
  Function:
    Handler: index.handler
    Runtime: nodejs12.x
    Timeout: 30

Resources:
  # API for GithubWebhooksFunction
  GithubWebhookApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
  # Lambda function that receives project changes from github
  GithubWebhooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}--cd--github-webhooks
      Description: !Sub Used by ${ProjectName} pipeline. Created by CloudFormation ${AWS::StackId}.
      CodeUri: github-webhooks/
      # AutoPublishAlias: live # ?
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          AUTO_PERMISSIONS: !Ref AutoPermissions
          GITHUB_TOKEN: !Ref GithubToken
          GITHUB_SECRET: !Ref GithubSecret
          GITHUB_OWNER: !Ref GithubOwner
          GITHUB_REPO: !Ref GithubRepo
          # Resources used by individual branch pipelines
          ARTIFACTS_BUCKET: !Ref ArtifactsBucket
          PERM_UPDATE_INVOKE: !If
            - HasPermissionsUpdate
            - !Ref PermissionsUpdateFunction
            - ''
          DEPLOY_ROLE_ARN: !GetAtt DeployRole.Arn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: '*'
              Resource: '*'
      Events:
        WebhookPost:
          Type: HttpApi
          Properties:
            Path: /
            Method: POST
            ApiId: !Ref GithubWebhookApi
        WebhookGet:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref GithubWebhookApi
  # Lambda function that updates GitHub Status
  GithubStatusUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}--cd--status-update
      Description: !Sub Used by ${ProjectName} pipeline. Created by CloudFormation ${AWS::StackId}.
      CodeUri: github-status-update/
      Role: !GetAtt GithubStatusUpdateRole.Arn
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          GITHUB_OWNER: !Ref GithubOwner
          GITHUB_REPO: !Ref GithubRepo
          GITHUB_OAUTH: !Ref GithubToken
      Events:
        Event:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.codepipeline
              detail-type:
                - "CodePipeline Pipeline Execution State Change"
              detail:
                state:
                  - "STARTED"
                  - "SUCCEEDED"
                  - "FAILED"
  GithubStatusUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}--cd--status-update-role
      Description: !Sub Used by ${ProjectName} pipeline. Created by CloudFormation ${AWS::StackId}.
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # TODO: tighten down on permissions
        # - arn:aws:iam::aws:policy/AdministratorAccess
        # - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole # TODO
      #Policies:
      #  # - AWSCodePipelineReadOnlyAccess
      #  # TODO: Try out
      #  - PolicyName: pipeline-access
      #    PolicyDocument:
      #      Version: "2012-10-17"
      #      Statement:
      #        - Effect: Allow
      #          Action:
      #            - codepipeline:GetPipeline
      #            - codepipeline:GetPipelineState
      #            - codepipeline:GetPipelineExecution
      #          Resource:
      #            - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
  # Once cloudformation resources are done being created, we need to update the codebuild permissions so they can access these resources
  PermissionsUpdateFunction:
    Type: AWS::Serverless::Function
    Condition: HasPermissionsUpdate
    Properties:
      FunctionName: !Sub ${ProjectName}--cd--perm-update
      Description: !Sub Used by ${ProjectName} pipeline. Created by CloudFormation ${AWS::StackId}.
      CodeUri: permissions-update/
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 10
      Role: !GetAtt PermissionsUpdateRole.Arn
      Environment:
        Variables:
          #STACK_NAME: !Ref DeployStackName
          #ROLE_NAME: !Ref CodeBuildRole
          POLICY_NAME: DYNAMICALLY-UPDATED-deployed-resources-access
          AWS_PARTITION: !Ref AWS::Partition
          AWS_ACCOUNT: !Ref AWS::AccountId
  PermissionsUpdateRole:
    Type: AWS::IAM::Role
    Condition: HasPermissionsUpdate
    Properties:
      RoleName: !Sub ${ProjectName}--cd--perm-update-role
      Description: !Sub Used by ${ProjectName} pipeline. Created by CloudFormation ${AWS::StackId}.
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        # https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-invoke-lambda-function.html#actions-invoke-lambda-function-create-function
        - PolicyName: pipeline-notify
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource:
                  - '*'
        # Get a list of the resources published by our stack
        - PolicyName: describe-stack-resources
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResources
                Resource:
                  - '*' #TODO
                  #- !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${DeployStackName}
                  #- !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${DeployStackName}/*
        # Allow edit of the codepipeline role
        - PolicyName: edit-codepipeline-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PutRolePolicy
                Resource:
                  - '*' #TODO
                  # - !GetAtt CodeBuildRole.Arn
  # S3 bucket containing build artifacts for all branch pipelines
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}--cd--artifacts
      # Don't keep outdated resources
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1 # TODO: could parameterize
            Status: Enabled
  # S3 bucket for hosting cd results
  #ResultsBucket:
  #  Type: AWS::S3::Bucket
  #  Properties:
  #    BucketName: !Sub ${ProjectName}--cd--results
  #    AccessControl: PublicRead
  #    WebsiteConfiguration:
  #      IndexDocument: index.html
  #      ErrorDocument: index.html
  #ResultsBucketPolicy:
  #  Type: AWS::S3::BucketPolicy
  #  Properties:
  #    Bucket: !Ref ResultsBucket
  #    PolicyDocument:
  #      Statement:
  #        - Sid: PublicReadGetObject
  #          Effect: Allow
  #          Principal: '*'
  #          Action:
  #            - s3:GetObject
  #          Resource: !Sub ${ResultsBucket.Arn}/*
  # Roles used by all pipelines
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}--ci--pipeline-role
      Description: !Sub "Used by CodePipeline. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        # Access to build artifact bucket
        - PolicyName: s3-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${ArtifactsBucket}/*
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetBucketPolicy"
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${ArtifactsBucket}
        # Allow invocation of permissions update
        - !If
          - HasPermissionsUpdate
          - PolicyName: invoke-permission-update-function
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - !GetAtt PermissionsUpdateFunction.Arn
          - !Ref AWS::NoValue
        # Access to code build/deployment
        - PolicyName: codebuild-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - '*' #TODO
                  #- !GetAtt Build.Arn
                  #- !GetAtt Deploy.Arn
                  #- !If
                  #  - HasFeatureIntegration
                  #  - !GetAtt Integration.Arn
                  #  - !Ref AWS::NoValue
                  #- !If
                  #  - HasFeatureCleanup
                  #  - !GetAtt Cleanup.Arn
                  #  - !Ref AWS::NoValue
        # Allow cloudformation to deploy changes to the deployment stack
        - PolicyName: deploy-cloudformation-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet 
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DescribeChangeSet
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/* #TODO
                  #- !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${DeployStackName}/*
        # Give pipelines same permissions as deploy
        - PolicyName: deploy-iam-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt DeployRole.Arn
  DeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}--ci--deploy-role
      Description: !Sub "Used by CodePipeline. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        # TODO: tighten down on permissions
        - arn:aws:iam::aws:policy/AdministratorAccess
      Policies:
        # Very generic policies
        - PolicyName: access-to-everything
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                    - cloudformation.amazonaws.com
                    - elasticbeanstalk.amazonaws.com
                    - ec2.amazonaws.com
                    - ecs-tasks.amazonaws.com
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
                Effect: Allow
              - Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: "*"
                Effect: Allow
              - Action:
                  - opsworks:CreateDeployment
                  - opsworks:DescribeApps
                  - opsworks:DescribeCommands
                  - opsworks:DescribeDeployments
                  - opsworks:DescribeInstances
                  - opsworks:DescribeStacks
                  - opsworks:UpdateApp
                  - opsworks:UpdateStack
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                Resource: "*"
                Effect: Allow
              - Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: "*"
                Effect: Allow
              - Action:
                  - servicecatalog:ListProvisioningArtifacts
                  - servicecatalog:CreateProvisioningArtifact
                  - servicecatalog:DescribeProvisioningArtifact
                  - servicecatalog:DeleteProvisioningArtifact
                  - servicecatalog:UpdateProduct
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
                Effect: Allow
              - Action:
                  - ecr:DescribeImages
                Resource: "*"
                Effect: Allow
              - Action:
                  - states:DescribeExecution
                  - states:DescribeStateMachine
                  - states:StartExecution
                Resource: "*"
                Effect: Allow
              - Action:
                  - appconfig:StartDeployment
                  - appconfig:StopDeployment
                  - appconfig:GetDeployment
                Resource: "*"
                Effect: Allow

Outputs:
  WebhookUrl:
    Description: Please link this url to a github webhook. See https://github.com/MarcGuiselin/aws-transmutation#getting-started for details.
    Value: !Sub https://${GithubWebhookApi}.execute-api.${AWS::Region}.amazonaws.com